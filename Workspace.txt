Import JDBC Packages:

This is for making the JDBC API classes immediately available to the application program. The following import statement should be included in the program irrespective of the JDBC driver being used:

import java,sql.*;                            

Import JDBC Packages:

This is for making the JDBC API classes immediately available to the application program. The following import statement should be included in the program irrespective of the JDBC driver being used:

import java,sql.*;                            

Additionally, depending on the features being used, Oracle-supplied JDBC packages might need to be imported. For example, the following packages might need to be imported while using the Oracle extensions to JDBC such as using advanced data types such as BLOB, and so on.	
import oracle.jdbc.driver.*;
import oracle.sql.*;                                                           
Loading and Registering the JDBC Driver:

This is for establishing a communication between the JDBC program and the Oracle database. This is done by using the static registerDriver() method of the DriverManager class of the JDBC API. The following line of code does this job:

DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
Alternatively, the forName() method of the java.lang.Class class can be used to load and register the JDBC driver.

However, the forName() method is valid for only JDK-compliant Java Virtual Machines and implicitly creates an instance of the Oracle driver, whereas the registerDriver() method does this explicitly.

Class.forName("oracle.jdbc.driver.OracleDriver");                     
Connecting to a Database:

Once the required packages have been imported and the Oracle JDBC driver has been loaded and registered, a database connection must be established. This is done by using the getConnection() method of the DriverManager class. A call to this method creates an object instance of the java.sql.Connection class. The getConnection() requires three input parameters, namely, a connect string, a username, and a password. The connect string should specify the JDBC driver to be yes and the database instance to connect to.

The getConnection() method is an overloaded method that takes

Three parameters, one each for the URL, username, and password.
Only one parameter for the database URL. In this case, the URL contains the username and password.
The following lines of code illustrate using the getConnection() method:

Connection conn = DriverManager.getConnection(URL, username, passwd);

Connection conn = DriverManager.getConnection(URL);
;

Querying the Database:

Querying the database involves two steps: first, creating a statement object to perform a query, and second, executing the query and returning a resultset.

Creating a Statement Object:

This is to instantiate objects that run the query against the database connected to. This is done by the createStatement() method of the conn Connection object created above. A call to this method creates an object instance of the Statement class. The following line of code illustrates this:

Statement sql_stmt = conn.createStatement();                    
Executing the Query and Returning a ResultSet:

Once a Statement object has been constructed, the next step is to execute the query. This is done by using the executeQuery() method of the Statement object. A call to this method takes as parameter a SQL SELECT statement and returns a JDBC ResultSet object. The following line of code illustrates this using the sql_stmt object created above:

ResultSet rset = sql_stmt.executeQuery
      ("SELECT empno, ename, sal, deptno FROM emp    ORDER BY ename");
Alternatively, the SQL statement can be placed in a string and then this string passed to the executeQuery() function. This is shown below.

String sql = "SELECT empno, ename, sal, deptno FROM emp ORDER BY ename";
ResultSet rset = sql_stmt.executeQuery(sql);
Statement and ResultSet Objects:

Statement and ResultSet objects open a corresponding cursor in the database for SELECT and other DML statements.

The above statement executes the SELECT statement specified in between the double quotes and stores the resulting rows in an instance of the ResultSet object named rset.

Processing the Results of a Database Query That Returns Multiple Rows

Once the query has been executed, there are two steps to be carried out:

Processing the output resultset to fetch the rows
Retrieving the column values of the current row
The first step is done using the next() method of the ResultSet object. A call to next() is executed in a loop to fetch the rows one row at a time, with each call to next() advancing the control to the next available row. The next() method returns the Boolean value true while rows are still available for fetching and returns false when all the rows have been fetched.

The second step is done by using the getXXX() methods of the JDBC rset object. Here getXXX() corresponds to the getInt(), getString() etc with XXX being replaced by a Java datatype.

The following code demonstrates the above steps:

Here the 1, 2, 3, and 4 in rset.getInt(), rset.getString(), getFloat(), and getInt() respectively denote the position of the columns in the SELECT statement, that is, the first column empno, second column ename, third column sal, and fourth column deptno of the SELECT statement respectively.

Exception Handling in JDBC
Like in PL/SQL programs, exceptions do occur in JDBC programs. Notice how the NO_DATA_FOUND exception was simulated in the earlier section "Processing the Results of a Database Query That Returns a Single Row."

Exceptions in JDBC are usually of two types:

Exceptions occurring in the JDBC driver
Exceptions occurring in the Oracle 8i database itself
Just as PL/SQL provides for an implicit or explicit RAISE statement for an exception, Oracle JDBC programs have a throw statement that is used to inform that JDBC calls throw the SQL exceptions. This is shown below.


throws SQLException

This creates instances of the class java.sql.SQLException or a subclass of it.

And, like in PL/SQL, SQL exceptions in JDBC have to be handled explicitly. Similar to PL/SQL exception handling sections, Java provides a try..catch section that can handle all exceptions including SQL exceptions. Handling an exception can basically include retrieving the error code, error text, the SQL state, and/or printing the error stack trace. The SQLException class provides methods for obtaining all of this information in case of error conditions.

Retrieving Error Code, Error Text, and SQL State:

There are the methods getErrorCode() and getMessage() similar to the functions SQLCODE and SQLERRM in PL/SQL. To retrieve the SQL state, there is the method getSQLState(). A brief description of these methods is given below:

getErrorCode()
This function returns the five-digit ORA number of the error in case of exceptions occurring in the JDBC driver as well as in the database.
getMessage()
This function returns the error message text in case of exceptions occurring in the JDBC driver. For exceptions occurring in the database, this function returns the error message text prefixed with the ORA number.
getSQLState()
This function returns the five digit code indicating the SQL state only for exceptions occurring in the database.
The following code illustrates the use of exception handlers in JDBC:


try {  }
catch (SQLException e) { System.out.println("ERR: "+ e.getMessage())}

We now show the QueryExample class of the earlier section with complete exception handlers built in it. The code is as follows:

//Import JDBC package
import java.sql.*;
// Import Java package for File I/O
import java.io.*;
public class QueryExample {
 public static void main (String[] args) {
 int ret_code;
 try {
  //Load and register Oracle driver
  DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
 //Establish a connection
 Connection conn =  DriverManager.getConnection("jdbc:oracle:thin:
 @training:1521:Oracle", "oratest", "oratest");
 //Create a Statement object
 Statement sql_stmt = conn.createStatement();
 //Create a ResultSet object, execute the query and return a
 // resultset
 ResultSet rset = sql_stmt.executeQuery("SELECT empno, ename, sal, 
 deptno FROM emp ORDER BY ename");
 //Process the resultset, retrieve data in each row, column by column
 // and write to an operating system file
String str = "";
while (rset.next())
 {
 str += rset.getInt(1)+" "+ rset.getString(2)+" "+rset.getFloat(3)+
 " "+rset.getInt(4)+"\n";
 }
 byte buf[] = str.getBytes();
OutputStream fp = new FileOutputStream("query1.lst");
fp.write(buf);
fp.close();
//Close the ResultSet and Statement
 rset.close();
 sql_stmt.close();
 //Close the database connection
 conn.close();
} catch (SQLException e) {ret_code = e.getErrorCode(); 
 System.err.println("Oracle Error: "+ ret_code + e.getMessage());}
 catch (IOException e) {System.out.println("Java Error: "+ 
 e.getMessage()); }
 }
}

The prepareStatement() method of Connection interface is used to

return the object of PreparedStatement.

Syntax:

public PreparedStatement prepareStatement(String query)

throws SQLException{} 

Example:

First of all create table as given below:

create table emp(id number(10),name varchar2(50));  

Now insert records in this table by the code given below:

import java.sql.*;  

class InsertPrepared

{  

public static void main(String args[])

{  

Try

{  

Class.forName("oracle.jdbc.driver.OracleDriver");  

  

Connection con=DriverManager.getConnection("jdbc:oracle:thin:

@localhost:1521:xe","system","oracle");  

  

PreparedStatement stmt=con.prepareStatement("insert into Emp

 values(?,?)");  

stmt.setInt(1,101);//1 specifies the first parameter in the query

  

stmt.setString(2,"Ratan");  

  

int i=stmt.executeUpdate();  

System.out.println(i+" records inserted");  

  

con.close();  

  

}

catch(Exception e)

{ System.out.println(e);

}  

  

}  

}

Example of PreparedStatement interface that updates the record:

PreparedStatement stmt=con.prepareStatement("update emp set

 name=? where id=?");  

  

stmt.setString(1,"Sonoo");//1 specifies the first parameter in the

query i.e. name  

stmt.setInt(2,101);  

int i=stmt.executeUpdate();  

System.out.println(i+" records updated");  

download this example

 

Example of PreparedStatement interface that retrieve the records

of a table:

PreparedStatement stmt=con.prepareStatement

("select * from emp");  

ResultSet rs=stmt.executeQuery();  

while(rs.next())

{  

System.out.println(rs.getInt(1)+" "+rs.getString(2));  

}  

Example of PreparedStatement to insert records until user press

n:

import java.sql.*;  

import java.io.*;  

class RS

{  

public static void main(String args[])throws Exception

{  

Class.forName("oracle.jdbc.driver.OracleDriver");  

Connection con=DriverManager.getConnection("jdbc:oracle:thin:

@localhost:1521:xe","system","oracle");  

  

PreparedStatement ps=con.prepareStatement("insert into emp13

0 values(?,?,?)");  

  

BufferedReader br=new BufferedReader

(new InputStreamReader(System.in));  

  

Do

{  

System.out.println("enter id:");  

int id=Integer.parseInt(br.readLine());  

System.out.println("enter name:");  

String name=br.readLine();  

System.out.println("enter salary:");  

float salary=Float.parseFloat(br.readLine());  

  

ps.setInt(1,id);  

ps.setString(2,name);  

ps.setFloat(3,salary);  

int i=ps.executeUpdate();  

System.out.println(i+" records affected");  

  

System.out.println("Do you want to continue: y/n");  

String s=br.readLine();  

if(s.startsWith("n"))

{  

break;  

}  

}while(true);  

  

con.close();  

}

}  
